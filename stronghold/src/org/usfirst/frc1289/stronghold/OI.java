// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1289.stronghold;

import org.usfirst.frc1289.stronghold.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    
    public JoystickButton MoveArmDown;
    public JoystickButton raiseArmUp;
    public JoystickButton ResetArm;
    public JoystickButton openSallyPort;
    public JoystickButton suckBallIn;
    public JoystickButton shootBallOut;
    public JoystickButton lowerBallHandler;
    public JoystickButton raiseBallHandler;
    public JoystickButton extendTapMeasure;
    public JoystickButton raiseRobot;
    public JoystickButton Cheval;
    public Joystick joystick0;    
    public Joystick joystick1;

    
    public OI() {
        

        joystick0 = new Joystick(0); //Drive Joystick
        joystick1 = new Joystick(1); //Control Joystick
        
       
        //Ball Handler
        shootBallOut = new JoystickButton(joystick1, 7);
        shootBallOut.whenPressed(new BallShoot());
        suckBallIn = new JoystickButton(joystick1, 3);
        suckBallIn.whileHeld(new BallLoad());
        //suckBallIn.whenReleased(new BallGetStop());
        
        //raiseBallHandler = new JoystickButton(joystick1,4);
        //raiseBallHandler.whenPressed(new BallRaiseHandler());
        lowerBallHandler = new JoystickButton(joystick1,4);
        lowerBallHandler.whileHeld(new BallLower());

        //Cheval = new JoystickButton(joystick1, 4);
        //Cheval.whileHeld(new BallLower());
                
        //Winch and Tape Measure Motor
        //raiseRobot = new JoystickButton(joystick1, 5);
        //raiseRobot.whileHeld(new WinchRetract());        
        //extendTapMeasure = new JoystickButton(joystick1,6);
        //extendTapMeasure.whileHeld(new WinchExtend());


        //SallyPort
        //openSallyPort = new JoystickButton(joystick1,1);
        //openSallyPort.whileHeld(new SallyDoor());
        
        //Arm
        raiseArmUp = new JoystickButton(joystick1, 12);
        raiseArmUp.whenPressed(new ArmOut());
        
        ResetArm=new JoystickButton(joystick1,2);
        ResetArm.whenPressed(new ArmReset());
        
        MoveArmDown = new JoystickButton(joystick1, 8);
        MoveArmDown.whenPressed(new ArmDown());

        	

        // SmartDashboard Buttons
        //SmartDashboard.putData("DriveViaUltra", new DriveViaUltra(500));
        //SmartDashboard.putData("DriveViaQuad", new DriveViaQuad(100,0.25));
        //SmartDashboard.putData("DriveViaCompass", new DriveToHeading(180));

        //SmartDashboard.putData("Extend Winch", new WinchExtend());
        //SmartDashboard.putData("Lift Robot", new WinchRetract());
        
        //SmartDashboard.putData("UltraSound PID Test", new Pid_with_Ultrasound(0.5));
        //SmartDashboard.putData("Compass PID Test", new Pid_with_Compass(180));
        
    }

    public Joystick getJoystick1() {
        return joystick1;
    }
    public Joystick getJoystick0() {
        return joystick0;
    }

}

