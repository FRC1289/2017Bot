// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1289.stronghold;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc1289.stronghold.commands.*;
import org.usfirst.frc1289.stronghold.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    CameraServer server;
    Compressor OurCompress;
    
    float StartHeading;
    float TempStartHeading;
    
    public static OI oi;

    public static BallDropper ballDropper;
    public static BallShooter ballShooter;

    public static DriveTrain driveTrain;

    // Used to get input from SmartDashboard
    // Will use to choose which autonomous program to run
    public static SendableChooser autoChooser;
    public static SendableChooser positionChooser;
    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	RobotMap.init();
        
    	ballDropper = new BallDropper();
        ballShooter = new BallShooter();
        driveTrain = new DriveTrain();
        
   
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period

        autonomousCommand = new AutonomousCommand();

        Robot.ballDropper.BallDropClose();
    	
    	// Report what command is running
    	SmartDashboard.putData(Scheduler.getInstance());
    	

    	
    	//Setting up input from SmartDashboard for Autonomous code selection
    	
    	SmartDashboard.putData("BallClose", new BallStop());
    	SmartDashboard.putData("BallDrop", new BallDrop());
    	SmartDashboard.putData("BallShoot", new BallShoot());
    	
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    	Robot.ballDropper.BallDropClose();

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {

    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        Robot.ballDropper.BallDropClose();

        
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        //SmartDashboard.putBoolean("Comp Not Connected", OurCompress.getCompressorNotConnectedFault());
    	//SmartDashboard.putBoolean("Comp Switch", OurCompress.getPressureSwitchValue());
    	//SmartDashboard.putBoolean("Comp Fault", OurCompress.getCompressorShortedFault());
    	//SmartDashboard.putNumber("Comp Current", OurCompress.getCompressorCurrent());
    	//SmartDashboard.putBoolean("Ball Switch", Robot.ballHandler.getSwitch());

    	//SmartDashboard.putNumber("Quad L", RobotMap.driveTrainQuadLeft.getDistance());
    	//SmartDashboard.putNumber("Quad R", RobotMap.driveTrainQuadRight.getDistance());
    	//SmartDashboard.putBoolean("Quad L dir", RobotMap.driveTrainQuadLeft.getDirection());
    	//SmartDashboard.putBoolean("Quad R dir", RobotMap.driveTrainQuadRight.getDirection());
    	//SmartDashboard.putNumber("Start Value: ", TempStartHeading);
    	//SmartDashboard.putNumber("Compass Heading: ", RobotMap.navx.getFusedHeading());
    	//SmartDashboard.putBoolean("Collision Detected: ", Robot.driveTrain.Jerk());
    	//SmartDashboard.putNumber("Ultra 1 Value", RobotMap.driveTrainUltra1.getValue());
    	//SmartDashboard.putNumber("Light Sensore", Robot.ballHandler.getSwitch());

    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
    	
    	
        LiveWindow.run();
    }
}
